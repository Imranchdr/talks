'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);

var babelHelpers = {};

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers;

var SceneDirector = function (_Component) {
  babelHelpers.inherits(SceneDirector, _Component);

  function SceneDirector(props) {
    babelHelpers.classCallCheck(this, SceneDirector);

    var _this = babelHelpers.possibleConstructorReturn(this, Object.getPrototypeOf(SceneDirector).call(this, props));

    _this.getInitialScene = function () {
      if (_this.props.initialScene) {
        return _this.props.initialScene;
      }

      return Object.keys(_this.props.scenes)[0];
    };

    _this.areScenesValid = function () {
      if (!_this.props.scenes || Object.keys(_this.props.scenes).length === 0) {
        return false;
      }

      if (!_this.state.currentScene) {
        return false;
      }

      return true;
    };

    _this.switchToScene = function (scene) {
      _this.setState({
        currentScene: scene
      }, function () {
        if (_this.props.onSwitchScene) {
          _this.props.onSwitchScene(scene);
        }
      });
    };

    _this.state = {
      currentScene: _this.getInitialScene()
    };
    return _this;
  }

  babelHelpers.createClass(SceneDirector, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { switchToScene: this.switchToScene };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.areScenesValid()) {
        if (this.props.onSwitchScene) {
          this.props.onSwitchScene(this.getInitialScene());
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (!this.areScenesValid()) {
        return null;
      }

      var scene = this.props.scenes[this.state.currentScene];

      if (!scene) {
        return null;
      }

      return React__default.createElement(scene, { switchToScene: this.switchToScene });
    }
  }]);
  return SceneDirector;
}(React.Component);

SceneDirector.propTypes = {
  scenes: React.PropTypes.object,
  initialScene: React.PropTypes.string,
  onSwitchScene: React.PropTypes.func
};
SceneDirector.childContextTypes = {
  switchToScene: React__default.PropTypes.func
};
SceneDirector.defaultProps = {
  scenes: {}
};

module.exports = SceneDirector;